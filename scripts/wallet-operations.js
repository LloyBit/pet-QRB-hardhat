const hre = require("hardhat");

async function main() {
  console.log("üöÄ –†–∞–±–æ—Ç–∞ —Å QRPaymentContract...");

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
  const [deployer, user1, user2] = await hre.ethers.getSigners();
  
  console.log("üë§ –î–µ–ø–ª–æ–π–µ—Ä:", deployer.address);
  console.log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1:", user1.address);
  console.log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2:", user2.address);

  // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
  const deployerBalance = await hre.ethers.provider.getBalance(deployer.address);
  const user1Balance = await hre.ethers.provider.getBalance(user1.address);
  const user2Balance = await hre.ethers.provider.getBalance(user2.address);

  console.log("\nüí∞ –ë–∞–ª–∞–Ω—Å—ã:");
  console.log(`–î–µ–ø–ª–æ–π–µ—Ä: ${hre.ethers.formatEther(deployerBalance)} ETH`);
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: ${hre.ethers.formatEther(user1Balance)} ETH`);
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: ${hre.ethers.formatEther(user2Balance)} ETH`);

  // –î–µ–ø–ª–æ–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  console.log("\nüì¶ –î–µ–ø–ª–æ–∏–º QRPaymentContract...");
  const QRPaymentContract = await hre.ethers.getContractFactory("QRPaymentContract");
  const contract = await QRPaymentContract.deploy();
  await contract.waitForDeployment();

  const contractAddress = await contract.getAddress();
  console.log(`üìç –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${contractAddress}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const contractBalance = await contract.getBalance();
  console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${hre.ethers.formatEther(contractBalance)} ETH`);

  // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
  console.log("\nüí≥ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂...");
  const paymentId = hre.ethers.keccak256(hre.ethers.toUtf8Bytes("test-payment-123"));
  const paymentAmount = hre.ethers.parseEther("0.1"); // 0.1 ETH

  console.log(`üÜî Payment ID: ${paymentId}`);
  console.log(`üíµ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: ${hre.ethers.formatEther(paymentAmount)} ETH`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
  const tx = await contract.connect(user1).payForTariff(paymentId, { value: paymentAmount });
  await tx.wait();

  console.log("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞
  const newContractBalance = await contract.getBalance();
  console.log(`üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${hre.ethers.formatEther(newContractBalance)} ETH`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
  const isProcessed = await contract.isPaymentProcessed(paymentId);
  console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${isProcessed}`);

  // –í—ã–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å –¥–µ–ø–ª–æ–π–µ—Ä–∞ (–≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
  console.log("\nüí∏ –í—ã–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞...");
  const withdrawTx = await contract.withdrawAll();
  await withdrawTx.wait();

  const finalContractBalance = await contract.getBalance();
  const finalDeployerBalance = await hre.ethers.provider.getBalance(deployer.address);

  console.log(`üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${hre.ethers.formatEther(finalContractBalance)} ETH`);
  console.log(`üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–µ–ø–ª–æ–π–µ—Ä–∞: ${hre.ethers.formatEther(finalDeployerBalance)} ETH`);

  console.log("\n‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    process.exit(1);
  });
