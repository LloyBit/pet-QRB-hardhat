const hre = require("hardhat");
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

async function showAccounts() {
  console.log("\nüë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:");
  const accounts = await hre.ethers.getSigners();
  
  for (let i = 0; i < accounts.length; i++) {
    const balance = await hre.ethers.provider.getBalance(accounts[i].address);
    console.log(`${i}: ${accounts[i].address} - ${hre.ethers.formatEther(balance)} ETH`);
  }
  
  return accounts;
}

async function transferFunds(sender, receiver, amount) {
  console.log(`\nüí∏ –ü–µ—Ä–µ–≤–æ–¥ ${hre.ethers.formatEther(amount)} ETH...`);
  console.log(`–û—Ç: ${sender.address}`);
  console.log(`–ö: ${receiver.address}`);

  const tx = await sender.sendTransaction({
    to: receiver.address,
    value: amount
  });

  console.log(`üìù –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${tx.hash}`);
  await tx.wait();
  console.log("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!");
}

async function main() {
  console.log("üè¶ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫");
  console.log("========================");

  const accounts = await showAccounts();

  while (true) {
    console.log("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
    console.log("1. –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤");
    console.log("2. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞");
    console.log("3. –í—ã—Ö–æ–¥");

    const choice = await askQuestion("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ");

    switch (choice) {
      case '1':
        await showAccounts();
        break;

      case '2':
        try {
          const senderInput = await askQuestion("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (0-19) –∏–ª–∏ –∞–¥—Ä–µ—Å: ");
          const receiverInput = await askQuestion("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è (0-19) –∏–ª–∏ –∞–¥—Ä–µ—Å: ");
          const amountStr = await askQuestion("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ ETH: ");

          let sender, receiver;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ –∞–¥—Ä–µ—Å–æ–º
          if (senderInput.match(/^[0-9]+$/)) {
            sender = accounts[parseInt(senderInput)];
          } else {
            // –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∞–¥—Ä–µ—Å—É
            sender = accounts.find(acc => acc.address.toLowerCase() === senderInput.toLowerCase());
          }

          if (receiverInput.match(/^[0-9]+$/)) {
            receiver = accounts[parseInt(receiverInput)];
          } else {
            // –î–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∞–¥—Ä–µ—Å–æ–º (–¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤)
            receiver = { address: receiverInput };
          }

          if (!sender) {
            console.log("‚ùå –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            break;
          }

          if (!receiver || !receiver.address) {
            console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è!");
            break;
          }

          const amount = hre.ethers.parseEther(amountStr);
          await transferFunds(sender, receiver, amount);
        } catch (error) {
          console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:", error.message);
        }
        break;

      case '3':
        console.log("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
        rl.close();
        return;

      default:
        console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
    }
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    process.exit(1);
  });
