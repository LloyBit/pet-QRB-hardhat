const { ethers } = require("ethers");

async function testPayment() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");

  // 1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–¥–µ
  const provider = new ethers.JsonRpcProvider("http://localhost:8545");
  
  // 2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ Hardhat (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á)
  const wallet = new ethers.Wallet("0xac0974be79faa7f79f94c0b6e63c55c71a55b7c3b1b5b6b6b6b6b6b6b6b6b6b6b6", provider);
  
  // 3Ô∏è‚É£ –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
  const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
  
  // 4Ô∏è‚É£ ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const contractABI = [
    {
      "inputs": [
        {"internalType": "bytes32", "name": "paymentId", "type": "bytes32"},
        {"internalType": "bytes32", "name": "tariffId", "type": "bytes32"},
        {"internalType": "uint256", "name": "price", "type": "uint256"}
      ],
      "name": "payForTariff",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [{"internalType": "bytes32", "name": "", "type": "bytes32"}],
      "name": "processedPayments",
      "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
      "stateMutability": "view",
      "type": "function"
    }
  ];

  // 5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const contract = new ethers.Contract(contractAddress, contractABI, wallet);

  // 6Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const paymentId = ethers.keccak256(ethers.toUtf8Bytes("test-payment-uuid"));
  const tariffId = ethers.keccak256(ethers.toUtf8Bytes("basic-tariff"));
  const price = 100;

  console.log("üßæ paymentId:", paymentId);
  console.log("üì¶ tariffId:", tariffId);
  console.log("üí∞ price:", price);

  // 7Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º calldata –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const calldata = contract.interface.encodeFunctionData("payForTariff", [paymentId, tariffId, price]);
  console.log("üîç Calldata:", calldata);
  console.log("üîç Selector:", calldata.slice(0, 10));
  console.log("üîç Calldata length:", calldata.length);

  // 8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
  const walletBalance = await provider.getBalance(wallet.address);
  console.log("üí≥ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:", ethers.formatEther(walletBalance), "ETH");

  // 9Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  try {
    const tx = await contract.payForTariff(paymentId, tariffId, price, {
      value: price,
      gasLimit: 100000
    });
    
    console.log("üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", tx.hash);
    
    // üîü –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const receipt = await tx.wait();
    console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ:", receipt.blockNumber);
    
    // 1Ô∏è‚É£1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    const compositeKey = ethers.keccak256(ethers.concat([paymentId, tariffId]));
    const isProcessed = await contract.processedPayments(compositeKey);
    console.log("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω?", isProcessed);
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testPayment()
  .then(() => {
    console.log("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    process.exit(1);
  });