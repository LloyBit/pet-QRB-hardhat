const hre = require("hardhat");
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

async function main() {
  console.log("üí∏ –ü–µ—Ä–µ–≤–æ–¥ —Å Hardhat –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ MetaMask");
  console.log("==========================================");

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã Hardhat
  const accounts = await hre.ethers.getSigners();
  
  console.log("\nüë• –î–æ—Å—Ç—É–ø–Ω—ã–µ Hardhat –∞–∫–∫–∞—É–Ω—Ç—ã:");
  for (let i = 0; i < 5; i++) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
    const balance = await hre.ethers.provider.getBalance(accounts[i].address);
    console.log(`${i}: ${accounts[i].address} - ${hre.ethers.formatEther(balance)} ETH`);
  }

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å MetaMask
  const metamaskAddress = await askQuestion("\nüé≠ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ MetaMask –∫–æ—à–µ–ª—å–∫–∞: ");
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
  if (!hre.ethers.isAddress(metamaskAddress)) {
    console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ Ethereum!");
    rl.close();
    return;
  }
  
  console.log(`\nüé≠ –ê–¥—Ä–µ—Å MetaMask: ${metamaskAddress}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å MetaMask –∫–æ—à–µ–ª—å–∫–∞
  const metamaskBalance = await hre.ethers.provider.getBalance(metamaskAddress);
  console.log(`üí∞ –ë–∞–ª–∞–Ω—Å MetaMask: ${hre.ethers.formatEther(metamaskBalance)} ETH`);

  // –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  const senderIndex = await askQuestion("\nüë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (0-4): ");
  const sender = accounts[parseInt(senderIndex)];
  
  if (!sender) {
    console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!");
    rl.close();
    return;
  }
  
  const senderBalance = await hre.ethers.provider.getBalance(sender.address);
  console.log(`\nüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${sender.address}`);
  console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${hre.ethers.formatEther(senderBalance)} ETH`);

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
  const amountStr = await askQuestion("\nüíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ ETH: ");
  const transferAmount = hre.ethers.parseEther(amountStr);
  
  if (senderBalance < transferAmount) {
    console.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!");
    return;
  }

  console.log(`\nüíµ –ü–µ—Ä–µ–≤–æ–¥–∏–º: ${hre.ethers.formatEther(transferAmount)} ETH`);
  console.log(`üì§ –û—Ç: ${sender.address}`);
  console.log(`üì• –ö: ${metamaskAddress}`);

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    console.log("\n‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥...");
    const tx = await sender.sendTransaction({
      to: metamaskAddress,
      value: transferAmount,
      gasLimit: 21000 // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    });

    console.log(`üìù –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${tx.hash}`);
    console.log("‚è≥ –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
    
    const receipt = await tx.wait();
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ: ${receipt.blockNumber}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    const newSenderBalance = await hre.ethers.provider.getBalance(sender.address);
    const newMetamaskBalance = await hre.ethers.provider.getBalance(metamaskAddress);

    console.log("\nüí∞ –ë–∞–ª–∞–Ω—Å—ã –ü–û–°–õ–ï –ø–µ—Ä–µ–≤–æ–¥–∞:");
    console.log(`–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${hre.ethers.formatEther(newSenderBalance)} ETH`);
    console.log(`MetaMask: ${hre.ethers.formatEther(newMetamaskBalance)} ETH`);

    console.log("\n‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!");
    console.log("üéâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à MetaMask –∫–æ—à–µ–ª–µ–∫!");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:", error.message);
  } finally {
    rl.close();
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    process.exit(1);
  });
