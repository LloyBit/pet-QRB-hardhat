const hre = require("hardhat");

async function main() {
  console.log("üöÄ –î–µ–ø–ª–æ–π QRPaymentContract...");

  // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const QRPaymentContract = await hre.ethers.getContractFactory("QRPaymentContract");

  // 2Ô∏è‚É£ –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const qrpaymentContract = await QRPaymentContract.deploy();
  await qrpaymentContract.waitForDeployment(); // ethers v6

  console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –¥–µ–ø–ª–æ–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:", qrpaymentContract.target);

  // 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
  const owner = await qrpaymentContract.owner();
  console.log("üëë –í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", owner);

  // 4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
  const [payer] = await hre.ethers.getSigners();

  // 5Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ UUID/—Ö—ç—à–∏
  const paymentId = hre.ethers.keccak256(hre.ethers.toUtf8Bytes("test-payment-uuid"));
  const tariffId = hre.ethers.keccak256(hre.ethers.toUtf8Bytes("basic-tariff"));
  const price = 100 

  console.log("üßæ paymentId:", paymentId);
  console.log("üì¶ tariffId:", tariffId);

  // üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º calldata –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const calldata = qrpaymentContract.interface.encodeFunctionData("payForTariff", [paymentId, tariffId, price]);
  console.log("üîç Calldata:", calldata);
  console.log("üîç Calldata length:", calldata.length);
  console.log("üîç Selector (first 4 bytes):", calldata.slice(0, 10));

  // üîç –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
  const functionSignature = "payForTariff(bytes32,bytes32,uint256)";
  const expectedSelector = hre.ethers.id(functionSignature).slice(0, 10);
  console.log("üîç Expected selector:", expectedSelector);
  console.log("üîç Selectors match:", calldata.slice(0, 10) === expectedSelector);

  // 6Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
  const tx = await qrpaymentContract.connect(payer).payForTariff(paymentId, tariffId, price, {
    value: price,
  });
  await tx.wait();
  console.log("üí∏ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

  // 7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ mapping (read-only)
  const compositeKey = hre.ethers.keccak256(
    hre.ethers.concat([paymentId, tariffId])
  );
  const isProcessed = await qrpaymentContract.processedPayments(compositeKey);
  console.log("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω?", isProcessed);

  // 8Ô∏è‚É£ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const newBalance = await hre.ethers.provider.getBalance(qrpaymentContract.target);
  console.log("üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", hre.ethers.formatEther(newBalance), "ETH");
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ:", error);
    process.exit(1);
  });
